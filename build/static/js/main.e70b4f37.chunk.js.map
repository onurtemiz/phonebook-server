{"version":3,"sources":["util/services.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newOBJ","post","personOBJ","delete","id","put","ErrorMessage","message","length","className","style","color","border","backgroundColor","fontSize","SucessMessage","Search","searchKeyword","handleKeywordChange","value","onChange","Form","addPerson","newName","handlePersonChange","newPhone","handlePhoneChange","onSubmit","type","Numbers","persons","handler","keyword","map","person","key","name","number","DelButton","onClick","Title","title","App","useState","setPersons","setNewName","setNewPhone","setSearchKeyword","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","services","then","response","data","filteredPerson","filter","toUpperCase","includes","event","target","preventDefault","find","p","window","confirm","newP","concat","setTimeout","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e70b4f37.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n};\n\nconst create = (newOBJ) => {\n  return axios.post(baseUrl, newOBJ);\n};\n\nconst deletePerson = (personOBJ) => {\n  return axios.delete(`${baseUrl}/${personOBJ.id}`);\n};\n\nconst update = (id, personOBJ) => {\n  return axios.put(`${baseUrl}/${id}`, personOBJ);\n};\n\nexport default { getAll, create, deletePerson, update };","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport services from \"./util/services\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newPhone, setNewPhone] = useState(\"\");\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const title = \"Phonebook\";\n\n  const hook = () => {\n    services.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  };\n\n  useEffect(hook, []);\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value);\n  };\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value);\n  };\n\n  const handleKeywordChange = (event) => {\n    setSearchKeyword(event.target.value);\n  };\n\n  const filteredPerson = persons.filter((person) =>\n    person.name.toUpperCase().includes(searchKeyword.toUpperCase())\n  );\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    if (persons.find((p) => p.name === newName)) {\n      if (\n        window.confirm(\n          `${newName} is already on the list, replace the old one with a new one?`\n        )\n      ) {\n        const p = persons.find((p) => p.name === newName);\n        const newP = { ...p, number: newPhone };\n        services.update(p.id, newP).then((response) => {\n          setPersons(\n            persons.map((person) =>\n              person.id !== p.id ? person : response.data\n            )\n          );\n        });\n      }\n    } else {\n      const personOBJ = {\n        name: newName,\n        number: newPhone,\n      };\n\n      services\n        .create(personOBJ)\n        .then((response) => {\n          personOBJ.id = response.data.id;\n          setPersons(persons.concat(personOBJ));\n          setSuccessMessage(`Added ${personOBJ.name}`);\n          setTimeout(() => {\n            setSuccessMessage(\"\");\n          }, 5000);\n        })\n        .catch((error) => {\n          setErrorMessage(error.response.data.error);\n        });\n    }\n\n    setNewName(\"\");\n    setNewPhone(\"\");\n  };\n\n  const deleteButtonHandler = (personOBJ) => {\n    if (window.confirm(`Delete ${personOBJ.name}`)) {\n      services\n        .deletePerson(personOBJ)\n        .then((response) => {\n          setPersons(persons.filter((person) => person.id !== personOBJ.id));\n        })\n        .catch((error) => {\n          setErrorMessage(\n            `Person ${personOBJ.name} was already removed from the server`\n          );\n          setTimeout(() => {\n            setErrorMessage(\"\");\n          }, 5000);\n          setPersons(persons.filter((person) => person.id !== personOBJ.id));\n        });\n    }\n  };\n\n  return (\n    <div>\n      <Title title={title} />\n      <ErrorMessage message={errorMessage} />\n      <SucessMessage message={successMessage} />\n      <Search\n        searchKeyword={searchKeyword}\n        handleKeywordChange={handleKeywordChange}\n      />\n      <h2>Add a new</h2>\n      <Form\n        addPerson={addPerson}\n        handlePersonChange={handlePersonChange}\n        newName={newName}\n        newPhone={newPhone}\n        handlePhoneChange={handlePhoneChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers\n        persons={filteredPerson}\n        keyword={searchKeyword}\n        handler={deleteButtonHandler}\n      />\n    </div>\n  );\n};\n\nconst ErrorMessage = ({ message }) => {\n  if (message.length === 0) {\n    return null;\n  }\n\n  const errorStyle = {\n    color: \"red\",\n    border: \"solid 3px red\",\n    backgroundColor: \"grey\",\n    fontSize: 20,\n  };\n\n  return (\n    <div className=\"error\" style={errorStyle}>\n      {message}\n    </div>\n  );\n};\n\nconst SucessMessage = ({ message }) => {\n  if (message.length === 0) {\n    return null;\n  } else {\n    const sucessStyle = {\n      color: \"green\",\n      border: \"solid 3px green\",\n      backgroundColor: \"grey\",\n      fontSize: 20,\n    };\n\n    return (\n      <div className=\"sucess\" style={sucessStyle}>\n        {message}\n      </div>\n    );\n  }\n};\n\nconst Search = ({ searchKeyword, handleKeywordChange }) => {\n  return (\n    <div>\n      filter shown with{\" \"}\n      <input value={searchKeyword} onChange={handleKeywordChange} />\n    </div>\n  );\n};\n\nconst Form = ({\n  addPerson,\n  newName,\n  handlePersonChange,\n  newPhone,\n  handlePhoneChange,\n}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={handlePersonChange} />\n      </div>\n      <div>\n        phone: <input value={newPhone} onChange={handlePhoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Numbers = ({ persons, keyword, handler }) => {\n  return (\n    <div>\n      {persons.map((person) => (\n        <p key={person.name}>\n          {person.name} {person.number}{\" \"}\n          <DelButton handler={handler} person={person} />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nconst DelButton = ({ handler, person }) => {\n  return (\n    <>\n      <button onClick={() => handler(person)}>delete</button>\n    </>\n  );\n};\n\nconst Title = ({ title }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}